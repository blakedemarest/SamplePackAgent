--- .gitignore ---
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*,cover
.hypothesis/
.pytest_cache/

# Virtual environments
.env/
.venv/
env/
venv/
ENV/
env.bak/

# Jupyter Notebook checkpoints
.ipynb_checkpoints

# pyenv
.python-version

# pipenv
Pipfile.lock

# poetry
poetry.lock

# Editor directories and files
.vscode/
.idea/
*.sublime-project
*.sublime-workspace

# OS files
.DS_Store
Thumbs.db

# dotenv environment variables
.env

# Ollama cache (if used)
ollama.cache/

# ElevenLabs API artifacts (if any)
*.wav
*.mp3

# Output directory for generated SFX
/output_sfx/

# Logs
logs/
*.log

# YAML prompt library
prompt_library.yml


--- codebase.txt ---


--- gitingest.py ---
#!/usr/bin/env python3
"""
scripts/gitingest_export.py

Generates:
  1) A plaintext dump of the entire codebase (codebase.txt)
  2) A directory tree listing (tree.txt)

Ignores patterns from .gitignore plus any “venv” or “.git” directories.
"""

import os
import fnmatch
from pathlib import Path

# ——————————————— CONFIG ————————————————
ROOT          = Path(r"C:\Users\Earth\BEDROT PRODUCTIONS\SamplePackAgent")
IGNORE_FILE   = ROOT / ".gitignore"
EXTRA_IGNORES = [
    "venv/*", "*/venv/*",
    ".git/*", "*/.git/*"
]
OUT_DIR        = ROOT
CODEBASE_DOC   = OUT_DIR / "codebase.txt"
TREE_DOC       = OUT_DIR / "tree.txt"


def load_ignore_patterns():
    patterns = set(EXTRA_IGNORES)
    if IGNORE_FILE.exists():
        for line in IGNORE_FILE.read_text().splitlines():
            line = line.strip()
            if not line or line.startswith("#"):
                continue
            patterns.add(line)
    return list(patterns)


def is_ignored(rel_path: str, patterns: list[str]) -> bool:
    for pat in patterns:
        if fnmatch.fnmatch(rel_path, pat):
            return True
    return False


def write_codebase(patterns: list[str]):
    with CODEBASE_DOC.open("w", encoding="utf-8") as out:
        for root, dirs, files in os.walk(ROOT):
            rel_dir = os.path.relpath(root, ROOT)

            # never descend into venv or .git
            if is_ignored(rel_dir + "/", patterns):
                dirs[:] = []
                continue

            for fname in files:
                rel_file = os.path.normpath(os.path.join(rel_dir, fname))
                if is_ignored(rel_file, patterns):
                    continue

                file_path = ROOT / rel_file
                out.write(f"--- {rel_file} ---\n")
                try:
                    text = file_path.read_text(encoding="utf-8")
                except Exception:
                    text = f"[Could not read file: {file_path}]\n"
                out.write(text + "\n\n")


def write_tree(patterns: list[str]):
    lines = []

    def recurse(dir_path: Path, prefix=""):
        entries = sorted(dir_path.iterdir())
        # filter out ignored entries (including .git)
        filtered = [
            e for e in entries
            if not is_ignored(str(e.relative_to(ROOT)), patterns)
        ]
        for i, entry in enumerate(filtered):
            connector = "└── " if i == len(filtered) - 1 else "├── "
            lines.append(f"{prefix}{connector}{entry.name}")
            if entry.is_dir():
                extension = "    " if i == len(filtered) - 1 else "│   "
                recurse(entry, prefix + extension)

    lines.append(".")
    recurse(ROOT)
    with TREE_DOC.open("w", encoding="utf-8") as out:
        out.write("\n".join(lines))


def main():
    OUT_DIR.mkdir(parents=True, exist_ok=True)
    patterns = load_ignore_patterns()
    write_codebase(patterns)
    write_tree(patterns)
    print(f"✅ Generated codebase at {CODEBASE_DOC}")
    print(f"✅ Generated tree view at {TREE_DOC}")


if __name__ == "__main__":
    main()


--- pyproject.toml ---
# pyproject.toml
[project]
name = "SamplePackAgent"
version = "0.1.0"
readme = "README.md"
requires-python = ">=3.8"

[project.dependencies]
elevenlabs = "*"
pydub = "*"
ffmpeg-python = "*"
ruamel.yaml = "*"
mutagen = "*"
pyloudnorm = "*"
gitingest = "*"
jinja2 = "*"
click = "*"
python-dotenv = "*"
pytest = "*"
PyQt5 = "*"

[project.scripts]
samplepackagent = "scripts.run_agent:main"


--- README.md ---
# README.md


--- requirements.txt ---
# requirements.txt
# Core SFX agent
elevenlabs>=0.1.0
pydub>=0.25.1
ffmpeg-python>=0.2.0
ruamel.yaml>=0.17.21
mutagen>=1.45.1
pyloudnorm>=0.1.0
gitingest
jinja2>=3.1.2
click>=8.1.3
python-dotenv>=1.0.0
pytest>=7.4.0

#UI
PyQt5>=5.15.9


--- tree.txt ---
.
├── .git
│   ├── COMMIT_EDITMSG
│   ├── config
│   ├── description
│   ├── HEAD
│   ├── hooks
│   │   ├── applypatch-msg.sample
│   │   ├── commit-msg.sample
│   │   ├── fsmonitor-watchman.sample
│   │   ├── post-update.sample
│   │   ├── pre-applypatch.sample
│   │   ├── pre-commit.sample
│   │   ├── pre-merge-commit.sample
│   │   ├── pre-push.sample
│   │   ├── pre-rebase.sample
│   │   ├── pre-receive.sample
│   │   ├── prepare-commit-msg.sample
│   │   ├── push-to-checkout.sample
│   │   ├── sendemail-validate.sample
│   │   └── update.sample
│   ├── index
│   ├── info
│   │   └── exclude
│   ├── logs
│   │   ├── HEAD
│   │   └── refs
│   │       ├── heads
│   │       │   └── main
│   │       └── remotes
│   │           └── origin
│   │               └── main
│   ├── objects
│   │   ├── 0f
│   │   │   └── 6dee994a90614c0df270921db629c396f02395
│   │   ├── 13
│   │   │   └── 82441d5eac96a061ad921e722a2288c5144a72
│   │   ├── 14
│   │   │   ├── 3f486c053e35edbe5b247f56e58c02d94fdd86
│   │   │   └── 71ee07f2a4d9c3fcf115dbc2a210695fd09b8f
│   │   ├── 16
│   │   │   └── e24e544bfdbf8a406b5f93cab2a481662e1ffc
│   │   ├── 23
│   │   │   └── 9e311aeb91225fc61094ea83bdbf431d921d90
│   │   ├── 26
│   │   │   └── bae5d9cf0959b8cce45e2e8b55fbb75219de21
│   │   ├── 2a
│   │   │   └── 486587c63bc0f53da12a0da5ea7925652b2e48
│   │   ├── 2e
│   │   │   └── 12e0b978885d8942edd2ca968efd63146c6b92
│   │   ├── 34
│   │   │   └── 675cd30bcb39490310b758fb1bd82a5f6805ac
│   │   ├── 41
│   │   │   └── 04e6c13117e65b909ce17d7aade8ae9210bb24
│   │   ├── 43
│   │   │   └── d1eda31cb5c4e1121b01c36835d5114a324017
│   │   ├── 45
│   │   │   └── 25b6fc86a652a2cb7321f4fcf82fbe2e422972
│   │   ├── 46
│   │   │   └── 15de3b9d7833b728f4b9c82ed47b9bd57c7201
│   │   ├── 4c
│   │   │   └── de1ecf10f39c76e4f1da84882684f9a8008867
│   │   ├── 4d
│   │   │   └── c93eec9801935bf154d8b28d0383610860d63e
│   │   ├── 56
│   │   │   └── 7b3c98dabcf2a58be198a6b0107b21803079c4
│   │   ├── 61
│   │   │   └── e7e5066d97877a8af997135ea937824e3c1a5f
│   │   ├── 65
│   │   │   └── 0af1954b2b00871247609011814d62eea0139c
│   │   ├── 6b
│   │   │   └── ff1e646cc55ed8eb481c3425eb1fd7bb0e3466
│   │   ├── 77
│   │   │   ├── 64bb87c87c23ba9c56d13da3083ee20d3820da
│   │   │   └── 829259a29d295bee38d2b315597056ffa5e53b
│   │   ├── 78
│   │   │   └── e9b4fb37aff83a7a8f91c2be91f0395ce4d0df
│   │   ├── 80
│   │   │   └── 31dcbba2701ed0e942f1520edc1d9ac8dd6ecc
│   │   ├── 82
│   │   │   └── 7c09dcdf4f5ce76fa168f25f7fee424011d970
│   │   ├── 83
│   │   │   └── e8ba967aae73ca10c74553009d4f9163ac8b15
│   │   ├── 9b
│   │   │   └── a831c1dbf67ececf0c22420f95236df7028527
│   │   ├── 9c
│   │   │   └── 4a212a18ea20add608c7f891c2324c3ca8eddf
│   │   ├── 9d
│   │   │   └── e233316ee9a06afdc1f30cc2e85ba297306d2a
│   │   ├── a0
│   │   │   └── 4fe408cecda1e6af8d1df92b24b56907a2a1cf
│   │   ├── a2
│   │   │   └── 5a51b182bf0a5ded90acf09d72b785c7902cfc
│   │   ├── a3
│   │   │   ├── 0ce3cf4ed5fc078b22b6f7231328a0ddeda489
│   │   │   ├── 13cfc6b2e614cd3737707af1d8c8100fd5cd7e
│   │   │   ├── 8005155c7e0c5c05cc1eebafbdaa6b1cd0ae8c
│   │   │   └── bdb7079331fe28775484221eb0eefbf7381993
│   │   ├── a6
│   │   │   └── d05885d6dcb561d09676aec245e2e025ba8af2
│   │   ├── a9
│   │   │   └── 2456fccbb7dffaa39e356b0d77d1c278afe12c
│   │   ├── ab
│   │   │   └── c900a41767cb59ad2b32212ac4d2687423ee99
│   │   ├── bb
│   │   │   ├── bb91bc1a89f6c58c4e8d09cdcd1ce7d07a16c4
│   │   │   └── d85b900b8da3f0fb4de8fc0fc47155197eb407
│   │   ├── bd
│   │   │   └── e5782f0dbc9fb5e7acc6d8dbd0c545bf50ab87
│   │   ├── c1
│   │   │   └── 90ef67947f88e9ec45cf0ae23d80e979589473
│   │   ├── c7
│   │   │   └── 4d4514e796f668cf8c8446894d891d823f8a6e
│   │   ├── ca
│   │   │   └── 088be94c0a5edfaf05e261f0e39860edb8e430
│   │   ├── d0
│   │   │   └── cd3a80b66e6ebf303b4b24d49ce935e131b54e
│   │   ├── d6
│   │   │   └── cf02534351a073da02ec98bad020ac644186f2
│   │   ├── d9
│   │   │   └── 8fc6f09c2b24e082400983ed841ea7d3d78bf2
│   │   ├── e1
│   │   │   └── e3ce2feeb0c465a127b84f7db7894263119d27
│   │   ├── e6
│   │   │   └── 9de29bb2d1d6434b8b29ae775ad8c2e48c5391
│   │   ├── eb
│   │   │   └── ffd6a5d0427b896291ff08cca13eb7d12dc25f
│   │   ├── f2
│   │   │   └── 43fd007859c8f048f2d84a4b5cdb72b562c514
│   │   ├── f3
│   │   │   └── 757168d8d4b2bdeb7c3fe14343df241cab567c
│   │   ├── fd
│   │   │   └── 4a1cfc4d9746fa5914a5bb87170b23311ffdf7
│   │   ├── fe
│   │   │   └── 8e3d46c4751cc0b4fd9f5d7841a7dd1a78085e
│   │   ├── info
│   │   └── pack
│   └── refs
│       ├── heads
│       │   └── main
│       ├── remotes
│       │   └── origin
│       │       └── main
│       └── tags
├── .gitignore
├── .pytest_cache
│   ├── .gitignore
│   ├── CACHEDIR.TAG
│   ├── README.md
│   └── v
│       └── cache
│           ├── lastfailed
│           ├── nodeids
│           └── stepwise
├── codebase.txt
├── configs
│   └── sfx_agent.yml
├── docs
│   ├── architecture.md
│   └── usage.md
├── gitingest.py
├── pyproject.toml
├── README.md
├── requirements.txt
├── scripts
│   ├── __init__.py
│   └── run_agent.py
├── sfx_agent
│   ├── __init__.py
│   ├── __pycache__
│   ├── composer.py
│   ├── config.py
│   ├── decomposer.py
│   ├── feedback.py
│   ├── generator.py
│   ├── input_handler.py
│   ├── library.py
│   ├── post_processor.py
│   └── runner.py
├── tests
│   ├── __init__.py
│   ├── __pycache__
│   ├── test_composer.py
│   ├── test_config.py
│   ├── test_decomposer.py
│   ├── test_feedback.py
│   ├── test_generator.py
│   ├── test_input_handler.py
│   ├── test_library.py
│   └── test_post_processor.py
└── venv

--- configs\sfx_agent.yml ---
# sfx_agent.yml
# Default settings for SamplePackAgent

# ElevenLabs sound‑effects model & voice
elevenlabs:
  voice: "sound_effects"
  model: "eleven_multisfx_v1"

# Ollama/Gemma settings
gemma:
  model: "gemma3:12b"

# Output settings
output:
  folder: "./output_sfx"
  file_format: "wav"

# Prompt defaults
prompt:
  default_duration: 1.5       # seconds
  prompt_influence: 0.8       # 0.0–1.0
  batch_influences: [0.6, 0.8, 1.0]

# Logging
logging:
  level: INFO


--- docs\architecture.md ---
# architecture.md


--- docs\usage.md ---
# usage.md


--- scripts\run_agent.py ---
# run_agent.py
from sfx_agent.config import Config
import logging

def main():
    cfg = Config("configs/sfx_agent.yml")
    logging.basicConfig(level=cfg._cfg["logging"]["level"])
    print("✔ ElevenLabs voice:", cfg.eleven_voice)
    print("✔ ElevenLabs model:", cfg.eleven_model)
    print("✔ Gemma model:", cfg.gemma_model)
    print("✔ Output folder:", cfg.output_folder)
    print("✔ Default duration:", cfg.default_duration)
    print("✔ Batch influences:", cfg.batch_influences)

if __name__ == "__main__":
    main()


--- scripts\__init__.py ---


--- sfx_agent\composer.py ---
# File: sfx_agent/composer.py

# TODO: Integrate Jinja2 templating for more flexible prompt templates
# TODO: Add parameter validation to ensure all required keys are present
# TODO: Allow custom templates via config or user override

from typing import Dict

DEFAULT_TEMPLATE = (
    "{source}: a {timbre} sound; {dynamics}, {duration}s, "
    "{pitch}; {space}; like {analogy}."
)

def compose_prompt(params: Dict[str, any], template: str = None) -> str:
    """
    Build a text-to-audio prompt from structured parameters.

    Args:
        params: Dict containing keys:
            - source (str)
            - timbre (str)
            - dynamics (str)
            - duration (float or int)
            - pitch (str)
            - space (str)
            - analogy (str)
        template: Optional override string with Python format fields.

    Returns:
        Fully formatted prompt string.
    """
    # TODO: Validate that params contains all required fields
    tpl = template or DEFAULT_TEMPLATE

    return tpl.format(
        source=params["source"],
        timbre=params["timbre"],
        dynamics=params["dynamics"],
        duration=params["duration"],
        pitch=params["pitch"],
        space=params["space"],
        analogy=params["analogy"],
    )


--- sfx_agent\config.py ---
# File: sfx_agent/config.py

# TODO: Add logging to record loaded config values and validation steps
# TODO: Support environment variable overrides (e.g., via python-dotenv)
# TODO: Cache the loaded config so repeated instantiations are fast
# TODO: Validate types (e.g., durations are numeric, batch_influences is a list of floats)

import os
from pathlib import Path
from ruamel.yaml import YAML

class ConfigError(Exception):
    """Raised when config file is missing or invalid."""
    pass

class Config:
    def __init__(self, path: str = None):
        """
        Load and validate the YAML config for the SFX agent.
        
        Args:
            path: Optional path to the config file. Defaults to 'configs/sfx_agent.yml'.
        
        Raises:
            FileNotFoundError: If the config file does not exist.
            ConfigError: If required keys are missing or invalid.
        """
        yaml = YAML(typ="safe")
        cfg_path = Path(path or "configs/sfx_agent.yml")
        if not cfg_path.exists():
            raise FileNotFoundError(f"Config file not found: {cfg_path}")
        self._cfg = yaml.load(cfg_path)
        self._validate()

    def _validate(self):
        """
        Ensure that all required sections and keys are present in the config.
        Raises ConfigError on missing entries.
        """
        required = {
            "elevenlabs": ["voice", "model"],
            "gemma": ["model"],
            "output": ["folder", "file_format"],
            "prompt": ["default_duration", "prompt_influence", "batch_influences"],
        }
        missing = []
        for section, keys in required.items():
            sec = self._cfg.get(section, {})
            for key in keys:
                if sec.get(key) is None:
                    missing.append(f"{section}.{key}")
        if missing:
            raise ConfigError(f"Missing config entries: {missing}")

    @property
    def eleven_voice(self) -> str:
        return self._cfg["elevenlabs"]["voice"]

    @property
    def eleven_model(self) -> str:
        return self._cfg["elevenlabs"]["model"]

    @property
    def gemma_model(self) -> str:
        return self._cfg["gemma"]["model"]

    @property
    def output_folder(self) -> Path:
        folder = Path(self._cfg["output"]["folder"])
        # TODO: Optionally create the folder if it doesn't exist
        return folder

    @property
    def output_format(self) -> str:
        return self._cfg["output"]["file_format"]

    @property
    def default_duration(self) -> float:
        return float(self._cfg["prompt"]["default_duration"])

    @property
    def prompt_influence(self) -> float:
        return float(self._cfg["prompt"]["prompt_influence"])

    @property
    def batch_influences(self) -> list[float]:
        return [float(x) for x in self._cfg["prompt"]["batch_influences"]]


--- sfx_agent\decomposer.py ---
# File: sfx_agent/decomposer.py

# TODO: Add logging statements to trace subprocess calls and outputs
# TODO: Implement retry logic for transient Ollama CLI failures
# TODO: Cache Gemma3 responses to avoid redundant calls for the same brief

import subprocess
import json
from .config import Config

class DecomposerError(Exception):
    """Raised when Gemma3 fails or returns invalid or unexpected output."""
    pass

def call_gemma(prompt: str, model: str | None = None) -> dict:
    """
    Invoke Ollama's Gemma3 model to parse an SFX brief into structured JSON parameters.

    Args:
        prompt: The instruction and brief text for Gemma3.
        model: Optional override of the Gemma3 model name from config.

    Returns:
        A dict parsed from Gemma3's JSON output.

    Raises:
        DecomposerError: On subprocess failure or invalid JSON.
    """
    # TODO: Add a timeout to the subprocess call for safety
    cfg = Config()
    model_name = model or cfg.gemma_model
    cmd = [
        "ollama", "eval", model_name,
        "--json",              # Request JSON output
        "--prompt", prompt     # Provide instruction and brief
    ]
    try:
        # TODO: Log the full cmd for debugging
        output = subprocess.check_output(cmd, stderr=subprocess.STDOUT)
        text = output.decode("utf-8")
        # TODO: Validate JSON structure contains expected keys
        return json.loads(text)
    except subprocess.CalledProcessError as e:
        # TODO: Log error output before raising
        msg = e.output.decode("utf-8", errors="ignore")
        raise DecomposerError(f"Gemma3 call failed: {msg}") from e
    except json.JSONDecodeError as e:
        # TODO: Include raw text in error for debugging
        raise DecomposerError(f"Invalid JSON from Gemma3: {text}") from e

def decompose_brief(brief: str) -> dict:
    """
    Convert a free-form SFX brief into structured parameters by instructing Gemma3.

    Args:
        brief: The user-provided description of the desired sound.

    Returns:
        A dict with keys: source, timbre, dynamics, duration, pitch,
        space, analogy, prompt_influence, batch_influences.
    """
    # TODO: Extend instruction to include examples for better parsing
    instruction = (
        "Decompose this SFX brief into JSON with keys: "
        "source, timbre, dynamics, duration, pitch, space, analogy, "
        "prompt_influence, batch_influences. "
        f"Brief: \"{brief}\""
    )
    return call_gemma(instruction)


--- sfx_agent\feedback.py ---
# File: sfx_agent/feedback.py

# TODO: Add logging for feedback requests and responses
# TODO: Refine instruction template for more precise improvement suggestions
# TODO: Support configurable thresholds to trigger feedback only when metrics exceed limits

from .config import Config
from .decomposer import call_gemma, DecomposerError

class FeedbackError(Exception):
    """Raised when the feedback process fails."""
    pass

def request_feedback(prompt: str, metrics: dict) -> dict:
    """
    Send the original prompt and audio metrics to Gemma3, requesting suggestions
    to improve the prompt for better sound-effect output.

    Args:
        prompt: The text-to-audio prompt used to generate the SFX.
        metrics: A dict of audio quality metrics (e.g., LUFS, peak dBFS).

    Returns:
        A dict containing Gemma3's structured feedback (e.g., suggested tweaks).

    Raises:
        FeedbackError: On failure to obtain or parse feedback.
    """
    cfg = Config()
    model_name = cfg.gemma_model
    # TODO: Move instruction template to config or constants
    instruction = (
        "You are an assistant that improves sound-effect prompts. "
        "Given the following text-to-audio prompt and audio metrics, "
        "suggest precise adjustments to optimize the sound quality.\n"
        f"Prompt: \"{prompt}\"\n"
        f"Metrics: {metrics}"
    )
    try:
        feedback = call_gemma(instruction, model=model_name)
        # TODO: Validate that feedback contains meaningful fields
        return feedback
    except DecomposerError as e:
        # TODO: Log the error details
        raise FeedbackError(f"Feedback request failed: {e}") from e


--- sfx_agent\generator.py ---
# File: sfx_agent/generator.py

# TODO: Add retry/backoff for ElevenLabs API failures
# TODO: Sanitize prompt text when generating filenames to avoid filesystem issues
# TODO: Support configurable output formats (wav/mp3) via config

import os
from pathlib import Path
from elevenlabs.client import ElevenLabs
from .config import Config

def generate_audio(
    prompt: str,
    duration: float,
    prompt_influence: float,
    config: Config
) -> Path:
    """
    Call ElevenLabs to generate an SFX clip and save to disk.

    Args:
        prompt: The fully formatted text prompt.
        duration: Target length in seconds.
        prompt_influence: Literal vs. creative control (0.0–1.0).
        config: Loaded Config instance.

    Returns:
        Path to the saved audio file.
    """
    client = ElevenLabs()  # TODO: pass api_key if required
    voice_id = config.eleven_voice
    model_id = config.eleven_model
    out_dir = config.output_folder
    out_dir.mkdir(parents=True, exist_ok=True)

    # Build a safe filename
    safe = "".join(c if c.isalnum() or c in ("_", "-") else "_" for c in prompt)[:50]
    filename = f"{safe}_{duration:.2f}_{prompt_influence:.2f}.{config.output_format}"
    out_path = out_dir / filename

    # TODO: Check for existing file and handle naming collisions
    # Generate audio bytes
    audio_bytes = client.text_to_speech.convert(
        text=prompt,
        voice_id=voice_id,
        model_id=model_id,
        output_format=config.output_format,
    )
    # Save to disk
    with open(out_path, "wb") as f:
        f.write(audio_bytes)
    return out_path


--- sfx_agent\input_handler.py ---
# File: sfx_agent/input_handler.py

# TODO: Add logging for received arguments and interactive prompts
# TODO: Validate that the config file path exists and is readable
# TODO: Allow loading multiple briefs from a file via an option
# TODO: Consider migrating to Click for richer CLI interface

import argparse
from typing import Tuple

def parse_args() -> Tuple[str, str]:
    """
    Parse command‑line arguments for the SFX agent.

    Returns:
        brief_text: The user‑provided SFX brief (or prompted interactively).
        config_path: Path to the YAML config file.
    """
    parser = argparse.ArgumentParser(
        description="Generate sound effects from a text brief using SamplePackAgent."
    )
    parser.add_argument(
        'brief',
        nargs='*',
        help='SFX brief description (words). If omitted, you will be prompted.'
    )
    parser.add_argument(
        '-c', '--config',
        default='configs/sfx_agent.yml',
        help='Path to the YAML config file'
    )

    args = parser.parse_args()

    # Determine brief text
    if args.brief:
        brief_text = ' '.join(args.brief)
    else:
        # TODO: Handle KeyboardInterrupt if user cancels input
        brief_text = input("Describe your SFX brief: ")

    return brief_text, args.config


--- sfx_agent\library.py ---
# File: sfx_agent/library.py

# TODO: Make library file path configurable via Config
# TODO: Add thread‑safe locking to prevent concurrent write conflicts
# TODO: Validate that each result dict contains required keys

from pathlib import Path
from ruamel.yaml import YAML


def add_to_library(brief: str, results: list[dict], path: str = None) -> Path:
    """
    Append a list of result entries under the given brief in a YAML library file.

    Args:
        brief: The original SFX brief text.
        results: A list of dicts, each containing metadata like 'path', 'peak_dB', etc.
        path: Optional path to the YAML library file (defaults to 'prompt_library.yml').

    Returns:
        The Path to the library file.
    """
    yaml = YAML(typ="safe")
    lib_path = Path(path or "prompt_library.yml")

    # Load existing data or start fresh
    if lib_path.exists():
        # Read YAML from file
        with lib_path.open("r") as f:
            data = yaml.load(f) or {}
    else:
        data = {}

    # Append or initialize the list for this brief
    existing = data.setdefault(brief, [])
    existing.extend(results)

    # Write back to disk
    lib_path.parent.mkdir(parents=True, exist_ok=True)
    with lib_path.open("w") as f:
        yaml.dump(data, f)

    return lib_path


--- sfx_agent\post_processor.py ---
# post_processor.py


--- sfx_agent\runner.py ---
# runner.py


--- sfx_agent\__init__.py ---
# __init__.py


--- tests\test_composer.py ---
# File: tests/test_composer.py

# TODO: Add tests for missing keys and template override
# TODO: Parametrize with multiple templates and param sets

import pytest
from sfx_agent.composer import compose_prompt, DEFAULT_TEMPLATE

@pytest.fixture
def sample_params():
    return {
        "source": "rusty metal door",
        "timbre": "sharp, metallic",
        "dynamics": "fast attack, short decay",
        "duration": 1.2,
        "pitch": "low-frequency",
        "space": "medium hall reverb",
        "analogy": "camera shutter click",
    }

def test_compose_uses_default_template(sample_params):
    prompt = compose_prompt(sample_params)
    expected = (
        "rusty metal door: a sharp, metallic sound; fast attack, short decay, "
        "1.2s, low-frequency; medium hall reverb; like camera shutter click."
    )
    assert prompt == expected

def test_compose_with_custom_template(sample_params):
    custom_tpl = "Make a {duration}s {source} with {dynamics}"
    prompt = compose_prompt(sample_params, template=custom_tpl)
    expected = "Make a 1.2s rusty metal door with fast attack, short decay"
    assert prompt == expected

def test_compose_missing_key_raises_key_error(sample_params):
    bad_params = sample_params.copy()
    bad_params.pop("space")
    with pytest.raises(KeyError):
        compose_prompt(bad_params)


--- tests\test_config.py ---
# test_config.py
# File: tests/test_config.py

# TODO: Add tests for environment variable overrides
# TODO: Test behavior when output folder does not exist
# TODO: Parametrize invalid types (e.g., non-numeric durations)

import pytest
import os
from pathlib import Path
from ruamel.yaml import YAML

from sfx_agent.config import Config, ConfigError

VALID_YAML = """
elevenlabs:
  voice: "sound_effects"
  model: "eleven_multisfx_v1"

gemma:
  model: "gemma3:12b"

output:
  folder: "./out_sfx"
  file_format: "wav"

prompt:
  default_duration: 2.0
  prompt_influence: 0.75
  batch_influences: [0.5, 0.8, 1.0]
"""

MISSING_YAML = """
elevenlabs:
  voice: "sound_effects"

gemma:
  model: "gemma3:12b"

output:
  folder: "./out_sfx"

prompt:
  default_duration: 2.0
"""

def write_yaml(tmp_path: Path, content: str) -> Path:
    cfg_file = tmp_path / "config.yml"
    cfg_file.write_text(content)
    return cfg_file

def test_load_valid_config(tmp_path, monkeypatch):
    cfg_path = write_yaml(tmp_path, VALID_YAML)
    # Monkeypatch default path
    monkeypatch.chdir(tmp_path)
    cfg = Config("config.yml")
    assert cfg.eleven_voice == "sound_effects"
    assert cfg.eleven_model == "eleven_multisfx_v1"
    assert cfg.gemma_model == "gemma3:12b"
    assert cfg.output_folder == Path("./out_sfx")
    assert cfg.output_format == "wav"
    assert cfg.default_duration == 2.0
    assert cfg.prompt_influence == 0.75
    assert cfg.batch_influences == [0.5, 0.8, 1.0]

def test_missing_config_file(tmp_path):
    with pytest.raises(FileNotFoundError):
        Config(str(tmp_path / "nonexistent.yml"))

def test_missing_required_keys(tmp_path, monkeypatch):
    cfg_path = write_yaml(tmp_path, MISSING_YAML)
    monkeypatch.chdir(tmp_path)
    with pytest.raises(ConfigError) as exc:
        Config("config.yml")
    msg = str(exc.value)
    assert "elevenlabs.model" in msg
    assert "output.file_format" in msg
    assert "prompt.prompt_influence" in msg

def test_invalid_type_for_duration(tmp_path, monkeypatch):
    bad_yaml = VALID_YAML.replace("2.0", "\"two\"")
    cfg_path = write_yaml(tmp_path, bad_yaml)
    monkeypatch.chdir(tmp_path)
    with pytest.raises(ValueError):
        Config("config.yml").default_duration  # conversion to float should fail


--- tests\test_decomposer.py ---
# File: tests/test_decomposer.py

# TODO: Add tests for timeout handling
# TODO: Include integration tests mocking Ollama responses
# TODO: Parametrize for different prompt variations

import subprocess
import json
import pytest

from sfx_agent.decomposer import call_gemma, decompose_brief, DecomposerError

def test_call_gemma_success(monkeypatch):
    fake_output = {"source": "door slam", "timbre": "sharp"}

    def fake_check_output(cmd, stderr):
        # Simulate successful JSON output from Gemma3
        return json.dumps(fake_output).encode("utf-8")

    monkeypatch.setattr(subprocess, "check_output", fake_check_output)
    result = call_gemma("any prompt", model="gemma3:1b")
    assert result == fake_output

def test_call_gemma_subprocess_error(monkeypatch):
    def fake_fail(cmd, stderr):
        # Simulate a called process error
        raise subprocess.CalledProcessError(1, cmd, output=b"error details")

    monkeypatch.setattr(subprocess, "check_output", fake_fail)
    with pytest.raises(DecomposerError) as exc:
        call_gemma("bad prompt", model="gemma3:1b")
    assert "error details" in str(exc.value)

def test_call_gemma_invalid_json(monkeypatch):
    def fake_bad_json(cmd, stderr):
        # Simulate non-JSON output
        return b"not a JSON"

    monkeypatch.setattr(subprocess, "check_output", fake_bad_json)
    with pytest.raises(DecomposerError) as exc:
        call_gemma("non-json output", model="gemma3:1b")
    assert "Invalid JSON" in str(exc.value)

def test_decompose_brief_uses_call_gemma(monkeypatch):
    dummy = {"foo": "bar"}
    # Ensure decompose_brief delegates to call_gemma
    monkeypatch.setattr("sfx_agent.decomposer.call_gemma", lambda p: dummy)
    result = decompose_brief("test brief")
    assert result is dummy


--- tests\test_feedback.py ---
# File: tests/test_feedback.py

# TODO: Add tests for malformed metrics input
# TODO: Test scenario where no suggestions are returned
# TODO: Parametrize with different prompt and metrics combinations

import pytest

from sfx_agent.feedback import request_feedback, FeedbackError

class DummyConfig:
    # stub Config to satisfy import in feedback
    gemma_model = "gemma3:1b"

@pytest.fixture(autouse=True)
def patch_config(monkeypatch):
    # Monkeypatch Config to return dummy config in feedback module
    monkeypatch.setattr('sfx_agent.feedback.Config', lambda *args, **kwargs: DummyConfig())

def test_request_feedback_success(monkeypatch):
    dummy_response = {"suggestion": "Increase prompt_influence to 0.9"}
    # Stub call_gemma to return dummy feedback
    monkeypatch.setattr('sfx_agent.feedback.call_gemma', lambda prompt, model=None: dummy_response)

    result = request_feedback("door slam prompt", {"peak_dB": -1.2, "lufs": -23.5})
    assert result == dummy_response

def test_request_feedback_failure(monkeypatch):
    # Stub call_gemma to raise DecomposerError
    from sfx_agent.decomposer import DecomposerError
    def fake_fail(prompt, model=None):
        raise DecomposerError("oops error")
    monkeypatch.setattr('sfx_agent.feedback.call_gemma', fake_fail)

    with pytest.raises(FeedbackError) as exc:
        request_feedback("test prompt", {"peak_dB": 0})
    assert "Feedback request failed" in str(exc.value)


--- tests\test_generator.py ---
# File: tests/test_generator.py

# TODO: Add tests for collision handling when file exists
# TODO: Test behavior with unsupported output formats

import pytest
from pathlib import Path
from elevenlabs.client import ElevenLabs

from sfx_agent.generator import generate_audio

class DummyConfig:
    """Minimal stand‑in for Config."""
    def __init__(self, out_dir: Path, fmt="wav"):
        self.eleven_voice = "sound_effects"
        self.eleven_model = "eleven_multisfx_v1"
        self.output_folder = out_dir
        self.output_format = fmt

class FakeClient:
    """Stub ElevenLabs client."""
    def __init__(self):
        self.calls = []

    class text_to_speech:
        @staticmethod
        def convert(text, voice_id, model_id, output_format):
            # validate inputs
            assert text == "test prompt"
            assert voice_id == "sound_effects"
            assert model_id == "eleven_multisfx_v1"
            assert output_format == "wav"
            return b"AUDIOBYTES"

@pytest.fixture(autouse=True)
def patch_client(monkeypatch):
    # Replace ElevenLabs with our fake
    monkeypatch.setattr("sfx_agent.generator.ElevenLabs", lambda: FakeClient())
    return

def test_generate_audio_creates_file(tmp_path):
    cfg = DummyConfig(tmp_path)
    out_path = generate_audio("test prompt", 1.5, 0.7, cfg)
    assert out_path.exists()
    assert out_path.read_bytes() == b"AUDIOBYTES"

def test_invalid_output_format(tmp_path):
    cfg = DummyConfig(tmp_path, fmt="exe")
    with pytest.raises(Exception):
        # we expect convert to raise or our code to error on bad format
        generate_audio("p", 1.0, 0.5, cfg)


--- tests\test_input_handler.py ---
# File: tests/test_input_handler.py

# TODO: Add tests for invalid config paths and file‑based inputs
# TODO: Parametrize tests for multiple argument orders
# TODO: Test behavior when user hits Enter without typing a brief

import sys
import pytest

from sfx_agent.input_handler import parse_args

def test_parse_args_with_brief_and_config(monkeypatch):
    # Simulate: script.py foo bar -c custom_config.yml
    monkeypatch.setattr(sys, 'argv', ['script.py', 'foo', 'bar', '-c', 'custom_config.yml'])
    brief, config = parse_args()
    assert brief == 'foo bar'
    assert config == 'custom_config.yml'

def test_parse_args_with_brief_default_config(monkeypatch):
    # Simulate: script.py hello world
    monkeypatch.setattr(sys, 'argv', ['script.py', 'hello', 'world'])
    brief, config = parse_args()
    assert brief == 'hello world'
    assert config == 'configs/sfx_agent.yml'

def test_parse_args_interactive(monkeypatch):
    # Simulate: script.py (no args) and input from user
    monkeypatch.setattr(sys, 'argv', ['script.py'])
    monkeypatch.setattr('builtins.input', lambda prompt: 'typed brief')
    brief, config = parse_args()
    assert brief == 'typed brief'
    assert config == 'configs/sfx_agent.yml'


--- tests\test_library.py ---
# File: tests/test_library.py

# TODO: Test behavior when results list is empty
# TODO: Test that invalid YAML in existing file raises a clear error
# TODO: Parametrize with multiple briefs and verify isolation

import pytest
from pathlib import Path
from ruamel.yaml import YAML

from sfx_agent.library import add_to_library

@pytest.fixture
def yaml_loader():
    return YAML(typ="safe")

def test_add_to_new_library(tmp_path, yaml_loader):
    lib_file = tmp_path / "lib.yml"
    brief = "my test brief"
    results = [{"path": "a.wav", "peak_dB": -1.0}]
    out_path = add_to_library(brief, results, path=str(lib_file))
    assert out_path == lib_file
    assert lib_file.exists()

    data = yaml_loader.load(lib_file)
    assert brief in data
    assert data[brief] == results

def test_append_to_existing(tmp_path, yaml_loader):
    lib_file = tmp_path / "lib.yml"
    initial = {"my test brief": [{"path": "a.wav", "peak_dB": -1.0}]}
    yaml_loader.dump(initial, lib_file.open("w"))

    new_results = [{"path": "b.wav", "peak_dB": -2.0}]
    add_to_library("my test brief", new_results, path=str(lib_file))

    data = yaml_loader.load(lib_file)
    assert data["my test brief"] == initial["my test brief"] + new_results

def test_library_creates_parent_dirs(tmp_path, yaml_loader):
    nested = tmp_path / "nested" / "dir" / "lib.yml"
    assert not nested.exists()

    add_to_library("brief", [], path=str(nested))
    assert nested.exists()

    data = yaml_loader.load(nested)
    assert data == {"brief": []}


--- tests\test_post_processor.py ---
# test_post_processor.py


--- tests\__init__.py ---


